@code {
    [CascadingParameter(Name = "DiagramManager")]
    public DiagramManager DiagramManager { get; set; }

    [Parameter]
    public LinkModel Link { get; set; }
}

@* Maybe we can use markers? *@

@switch (Link.Type)
{
    case Core.Models.LinkType.Line:
        <line x1="@Link.GetMiddleSourceX().ToInvariantString()"
              y1="@Link.GetMiddleSourceY().ToInvariantString()"
              x2="@Link.GetTargetX().ToInvariantString()"
              y2="@Link.GetTargetY().ToInvariantString()"
              stroke="@(Link.Selected ? DiagramManager.Options.Links.DefaultSelectedColor : DiagramManager.Options.Links.DefaultColor)"
              stroke-width="4" />
        break;
    case Core.Models.LinkType.Curved:
        <path d="@Link.GenerateCurvedPath()"
              stroke-width="3"
              fill="none"
              stroke="@(Link.Selected ? DiagramManager.Options.Links.DefaultSelectedColor : DiagramManager.Options.Links.DefaultColor)" />
        break;
    case Core.Models.LinkType.LineWithArrowToTarget:
        <g>
            <line x1="@Link.GetMiddleSourceX().ToInvariantString()"
                  y1="@Link.GetMiddleSourceY().ToInvariantString()"
                  x2="@Link.GetTargetX().ToInvariantString()"
                  y2="@Link.GetTargetY().ToInvariantString()"
                  stroke="@(Link.Selected ? DiagramManager.Options.Links.DefaultSelectedColor : DiagramManager.Options.Links.DefaultColor)"
                  stroke-width="4" />
        </g>
        <g transform="translate(@Link.GetTargetX().ToInvariantString(), @Link.GetTargetY().ToInvariantString())">
            <g style="transform: rotate(@(Link.CalculateAngleForTargetArrow())deg);">
                <g transform="translate(0, -4)">
                    <polygon points="0,10 8,30 -8,30"
                             fill="@(Link.Selected ? DiagramManager.Options.Links.DefaultSelectedColor : DiagramManager.Options.Links.DefaultColor)">
                    </polygon>
                </g>
            </g>
        </g>
        break;
}